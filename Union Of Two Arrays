#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

bool binarySearch(vector<int> nums, int target)
{
    int l = 0, r = nums.size() - 1, mid;

    while (l <= r)
    {
        mid = l + (r - l) / 2;

        if (nums[mid] > target)
            r = mid - 1;
        else if (nums[mid] < target)
            l = mid + 1;
        else
            return true;
    }
}

void Union(vector<int> nums1, vector<int> nums2)
{
    vector<int> result;

    sort(nums1.begin(), nums1.end());
    sort(nums2.begin(), nums2.end());

    int i = 0, j = 0;

    while (i < nums1.size() && j < nums2.size())
    {
        if (nums1[i] < nums2[j])
        {
            result.push_back(nums1[i]);
            i++;
        }
        else if (nums2[j] < nums1[i])
        {
            result.push_back(nums2[j]);
            j++;
        }
        else
        {
            result.push_back(nums1[i]);
            i++;
            j++;
        }
    }

    while(i<nums1.size())
        result.push_back(nums1[i++]);
    
    while(j<nums2.size())
        result.push_back(nums2[j++]);

    for(int i = 0;i<result.size();i++)
        cout<<result[i] <<" ";
}

int main()
{
    vector<int> nums1 = {7, 1, 5, 2, 3, 6};
    vector<int> nums2 = {3, 8, 6, 20, 7};

    Union(nums1, nums2);

    return 0;
}
